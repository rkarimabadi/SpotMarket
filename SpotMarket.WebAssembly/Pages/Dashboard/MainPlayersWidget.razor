@using SpotMarket.WebAssembly.Models.Presentation
@inject IDashboardService DashboardService
@inject NavigationManager NavManager
<div class="widget-container">
    <div class="section-header">
        <h3 class="section-title">@Title</h3>
        <h4 class="section-subtitle">@Subtitle</h4>
    </div>
@if (_isLoading)
    {
        <div class="players-grid" style="grid-template-columns: repeat(2, 1fr);">
            @for (var i = 0; i < 2; i++)
            {
                <div class="player-card data-placeholder ">
                    <BarLoader />
                </div>
            }
        </div>
    }
    else if (Players?.Any() == true)
    {
    <div class="players-grid" style="grid-template-columns: repeat(@Players.Count(), 1fr);">
        @foreach (var player in Players)
        {
            <div class="player-card" @onclick="() => GoToPlayer(player)">
                <div class="player-icon"><i class="@player.IconCssClass"></i></div>
                <div class="player-title">@PlayerType(player.Type)</div>
                <div class="player-name">@player.Name</div>
                <div class="player-stat-container">
                    <div class="player-share">@player.MarketShare.ToString("0.0")%</div>
                </div>
            </div>
        }
        </div>
    }
    else
    {
    <div class="players-grid" style="grid-template-columns: repeat(2, 1fr);">
        @for (var i = 0; i < 2; i++)
        {
            <div class="player-card data-placeholder">
                <NoData/>
            </div>
        }
    </div>            
    }



</div>


@code {
    [Parameter]
    public string Title { get; set; } = "بازیگران اصلی";
    [Parameter]
    public string Subtitle { get; set; } = "بر اساس ارزش کل عرضه‌ها";

    private IEnumerable<MainPlayer>? Players;
    private bool _isLoading = false;
    private bool _hasError = false;
    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        _hasError = false;
        try
        {
            Players = await DashboardService.GetMainPlayers();
            if (Players == null)
            {
                Players = Enumerable.Empty<MainPlayer>();
            }
        }
        catch (Exception ex)
        {
            _hasError = true;
            // Optionally log the exception
        }
        finally
        {
            _isLoading = false;
        }
    }

    private string PlayerType(MainPlayerType type) => type switch
    {
        MainPlayerType.Broker => "برترین کارگزار",
        MainPlayerType.Supplier => "برترین عرضه‌کننده",
        _ => "نامشخص"
    };
    private void GoToPlayer(MainPlayer item)
    {
        switch (item.Type)
        {
            case MainPlayerType.Broker:
                NavManager.NavigateTo($"/players/brokers/{item.Id}");
                break;
            case MainPlayerType.Supplier:
                NavManager.NavigateTo($"/players/suppliers/{item.Id}");
                break;
        }
    }
}
