@page "/"
@using SpotMarket.WebAssembly.Models.Presentation
@using SpotMarket.WebAssembly.Pages.Widgets
@using SpotMarket.WebAssembly.Services.Presentation
@inject NavStateService NavState
@inject SettingsService SettingsService
@inject IDashboardService DashboardService

<PageTitle>داشبورد</PageTitle>
<div class="dashboard-container">

    <DashboardHeader />
    @if (_isLoading)
    {
        <p><em>در حال بارگذاری اطلاعات داشبورد...</em></p>
    } else {
        if (widgetLayout != null)
        {
            @foreach (var widgetConfig in widgetLayout)
            {
                @if (widgetConfig.IsVisible)
                {
                    @switch (widgetConfig.Type)
                    {
                        case DashboardWidgetType.MarketProgress:
                            <MarketAdvanceProgressBarWidget Data="marketProgressData" />
                            break;
                        case DashboardWidgetType.TradingHalls:
                            <TradingHallsWidget Data="tradingHallsData" />
                            break;
                        case DashboardWidgetType.MarketMovers:
                            <MarketMoversWidget Data="marketMoversData" />
                            break;
                        case DashboardWidgetType.MainPlayers:
                            <MainPlayersWidget Players="mainPlayersData" />
                            break;
                        case DashboardWidgetType.MarketExcitement:
                            <MarketExcitementWidget Data="marketExcitementData" />
                            break;
                        case DashboardWidgetType.MarketPulse:
                            <MarketPulseWidget Data="marketPulseData" />
                            break;
                        case DashboardWidgetType.MarketSentiment:
                            <MarketSentimentWidget Data="marketSentimentData" />
                            break;
                        case DashboardWidgetType.SupplyRisk:
                            <SupplyRiskWidget Data="supplyRiskData" />
                            break;
                        case DashboardWidgetType.SpotNotifictions:
                            <SpotNotifictionsWidget Data="spotNotificationData" />
                            break;
                    }
                }
            }
        }
    }

</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        NavState.SetNavState("کالا نما", false);
        var settings = await SettingsService.LoadSettingsAsync();
        widgetLayout = settings?.DashboardLayout ?? new List<DashboardWidgetConfig>
        {
            new() { Type = DashboardWidgetType.MarketProgress },
            new() { Type = DashboardWidgetType.TradingHalls },
            new() { Type = DashboardWidgetType.MarketMovers },
            new() { Type = DashboardWidgetType.MainPlayers },
            new() { Type = DashboardWidgetType.MarketExcitement },
            new() { Type = DashboardWidgetType.MarketPulse },
            new() { Type = DashboardWidgetType.MarketSentiment },
            new() { Type = DashboardWidgetType.SupplyRisk },
            new() { Type = DashboardWidgetType.SpotNotifictions, IsVisible = true }
        };
        await LoadDemoDataAsync();
    }

    private List<DashboardWidgetConfig> widgetLayout = new();

    private bool _isLoading = true;
    private IEnumerable<MainPlayer> mainPlayersData = new List<MainPlayer>();
    private MarketExcitementData? marketExcitementData;
    private MarketMoversData? marketMoversData;
    private MarketPulseData? marketPulseData;
    private MarketSentimentData? marketSentimentData;
    private SpotNotificationData? spotNotificationData;
    private SupplyRiskData? supplyRiskData;
    private TradingHallsData? tradingHallsData;
    private MarketProgressData? marketProgressData;

    private async Task LoadDemoDataAsync()
    {
        try
        {
            // فراخوانی همزمان تمام سرویس‌ها برای بهبود پرفورمنس
            var pulseTask = DashboardService.GetMarketPulse();
            var sentimentTask = DashboardService.GetMarketSentiment();
            var excitementTask = DashboardService.GetMarketExcitement();
            var supplyRiskTask = DashboardService.GetSupplyRisk();
            var moversTask = DashboardService.GetMarketMovers();
            var playersTask = DashboardService.GetMainPlayers();
            var hallsTask = DashboardService.GetTradingHalls();
            var spotNotificationTask = DashboardService.GetspotNotifications();
            var progressTask = DashboardService.GetMarketProgressData();

            await Task.WhenAll(
                pulseTask, sentimentTask, excitementTask, supplyRiskTask,
                moversTask, playersTask, hallsTask, spotNotificationTask
            );

            marketPulseData = await pulseTask;
            marketSentimentData = await sentimentTask;
            marketExcitementData = await excitementTask;
            supplyRiskData = await supplyRiskTask;
            marketMoversData = await moversTask;
            mainPlayersData = await playersTask;
            tradingHallsData = await hallsTask;
            spotNotificationData = await spotNotificationTask;
            marketProgressData = await progressTask;
        }
        catch (Exception ex)
        {
            // لاگ کردن خطا
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }
}
