@page "/markets"
@using SpotMarket.WebAssembly.Models.App
@using SpotMarket.WebAssembly.Pages.Widgets
@using SpotMarket.WebAssembly.Services.App
@using SpotMarket.WebAssembly.Services.Presentation
@inject NavStateService NavState
@inject SettingsService SettingsService
@inject IMarketsService MarketService
<PageTitle>بازارها</PageTitle>

<div class="page-container">
    <div class="page-header">
        <h1 class="page-title-large">بازارها</h1>
    </div>
    @if (marketSettings != null && marketSettings.VisibleInfoWidgets.Exists( x => x == MarketInfoWidgetType.ProgressRings))
    {
        <MarketProgressRingsWidget Data="marketActivityItems" />
    }
    @if (settingsLoaded)
    {
        <!-- نمایش نمای اصلی بر اساس تنظیمات -->
        @switch (marketSettings?.MainView)
        {
            case MarketMainViewType.List:
                <MarketListWidget Data="marketInfoItems" />
                break;
            case MarketMainViewType.Heatmap:
                <MarketHeatmapWidget Data="marketHeatmapData" Subtitle="براساس میانگین وزنی قیمت" />
                break;
            case MarketMainViewType.Shortcuts:
                <AdvancedMarketShortcutsWidget Data="marketShortcutsData" Subtitle="" Title="" />
                break;
        }

        <!-- نمایش ویجت‌های اطلاعاتی بر اساس تنظیمات -->
        @if (marketSettings != null)
        {
            foreach (var widgetType in marketSettings.VisibleInfoWidgets)
            {
                @switch (widgetType)
                {
                    case MarketInfoWidgetType.SelectedCommodity:
                        <MarketContactsWidget Data="marketContactsData" Title="کالاهای پرطرفدار" Subtitle="براساس تعدد عرضه" />
                        break;
                    case MarketInfoWidgetType.TodayGroups:
                        <CommodityStatusHorizontalWidget Data="commodityStatusData" Title="گروه‌های منتخب" Subtitle="براساس تعداد اطلاعیه عرضه" />
                        break;
                }
            }
        }
    }
    else
    {
        <p><em>در حال بارگذاری چیدمان...</em></p>
    }
</div>

@code {
    private MarketSettings? marketSettings;
    private bool settingsLoaded = false;
    private bool _isLoading = true;

    private CommodityStatusData? commodityStatusData;
    private MarketContactsData? marketContactsData;
    private MarketHeatmapData? marketHeatmapData;
    private MarketShortcutsData? marketShortcutsData;
    private List<MarketInfo>? marketInfoItems;
    private List<MarketActivity>? marketActivityItems;

    protected override async Task OnInitializedAsync()
    {
        NavState.SetNavState("بازارها", true);
        var settings = await SettingsService.LoadSettingsAsync() ?? SettingsService.GetDefaultSettings();
        marketSettings = settings.MarketPageLayout;
        settingsLoaded = true;
        await LoadDataAsync();
    }
    private async Task LoadDataAsync()
    {
        try
        {
            _isLoading = true;
            var commodityStatusTask = MarketService.GetIndexGroups();
            var marketInfoTask = MarketService.GetMainGroupsData();
            var marketActivityTask = MarketService.GetMarketActivities();
            var marketContactsTask = MarketService.GetMarketContacts();
            var marketHeatmapTask = MarketService.GetMarketHeatmapData();
            var marketShortcutsTask = MarketService.GetMarketShortcutsData();

            await Task.WhenAll(
                commodityStatusTask, marketInfoTask, marketActivityTask, marketContactsTask, marketHeatmapTask, marketShortcutsTask
            );

            commodityStatusData = await commodityStatusTask;
            marketInfoItems = await marketInfoTask;
            marketActivityItems = await marketActivityTask;
            marketContactsData = await marketContactsTask;
            marketHeatmapData = await marketHeatmapTask;
            marketShortcutsData = await marketShortcutsTask;
        }
        catch (Exception ex)
        {
            // لاگ کردن خطا
            Console.WriteLine($"Error loading markets data: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

}
