@page "/markets/{mainGroupId:int}/{groupId:int}/{subGroupId:int}"
@using SpotMarket.WebAssembly.Services.Presentation
@inject NavStateService NavState
@inject IMarketsService MarketService
@inject IMainGroupService MainGroupService
@inject IGroupService GroupService
@inject ISubGroupService SubGroupService
<div class="page-container">
    <GroupHeaderWidget Data="@groupName" />
    @if (_isLoading)
    {
        <p><em>در حال بارگذاری اطلاعات زیرگروه...</em></p>
    }  else {
@*         @if (subGroupActivityStatus == GroupActivityStatus.Inactive)
        {
            <NoActivityWidget />
        } else
        {            
            if(groupActivitiesData.Items.Any()) 
            {
                <MarketConditionsWidget Data="groupActivitiesData" />
            }
        } *@
        <ExpandableSubGroupListWidget Data="groupListData" Unit="کالا" Title="کالاهای فعال" UrlPrefix="@urlprefix" />
        <SubGroupOffersWidget Data="upcomingOffersData" />
    }

</div>
@code {
    [Parameter] public int mainGroupId { get; set; }
    [Parameter] public int groupId { get; set; }
    [Parameter] public int subGroupId { get; set; }
    private MarketShortcutItem? groupName;
    private GroupListData subGroupList = new();
    private GroupListData? groupListData;
    private GroupActivityStatus subGroupActivityStatus;
    private GroupActivityData? activeGroupData;
    private UpcomingOffersData? upcomingOffersData;
    private MarketConditionsData? groupActivitiesData;

    private string urlprefix => $"{mainGroupId}/{groupId}/{subGroupId}/";
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadDate();
        base.OnInitialized();

    }

    private async Task LoadDate()
    {
        try
        {
            var mainGroupList = await MarketService.GetMarketShortcutsData();
            groupName = mainGroupList.Items.FirstOrDefault(g => g.Code == mainGroupId);
            subGroupList = await GroupService.GetActiveSubGroupsAsync(groupId);
            var _groupName = subGroupList.Items.FirstOrDefault(g => g.UrlName == subGroupId.ToString());

            groupName.Title = _groupName.Title;
            groupName.Code = int.Parse(_groupName.UrlName);

            var pageTitle = $"تحلیل زیرگروه {groupName?.Title}";
            NavState.SetNavState(pageTitle, true, $"/markets/{mainGroupId}/{groupId}");
            groupListData = await SubGroupService.GetActiveCommoditiesAsync(groupName.Code);

            subGroupActivityStatus = groupListData.Items.Exists(x => x.Status == GroupActivityStatus.HasOfferToday) ? GroupActivityStatus.HasOfferToday : groupListData.Items.Exists(x => x.Status == GroupActivityStatus.HasUpcomingOffer) ? GroupActivityStatus.HasUpcomingOffer : GroupActivityStatus.Inactive;

            upcomingOffersData = await SubGroupService.GetOfferHistoryAsync(groupName.Code);
            groupActivitiesData = await SubGroupService.GetCommodityActivitiesAsync(groupName.Code);
        }
        catch (Exception ex)
        {
            // لاگ کردن خطا
            Console.WriteLine($"Error loading main group data: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }
}
