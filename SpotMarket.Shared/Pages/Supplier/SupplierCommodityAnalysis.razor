@inject ISupplierService SupplierService
@using System.Text.RegularExpressions
@inject NavigationManager NavManager
@if (data?.Items != null && data.Items.Any())
{
    <div class="widget-container">
        <div class="section-header">
            <h3 class="section-title">تحلیل عملکرد کالاها</h3>
        </div>
        <div class="horizontal-scroll-container">
            @foreach (var item in data.Items)
            {
                <div class="commodity-analysis-card" @onclick="() => GoToCommodity(item)">
                    <div class="card-header">
                        <div class="card-icon"><i class="bi bi-clipboard-data"></i></div>
                        <h4 class="card-title">@item.CommodityName</h4>
                    </div>
                    <div class="card-body">
                        <div class="stat-item">
                            <span class="stat-label">تناوب عرضه</span>
                            <span class="stat-value">@item.OfferFrequency</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">حجم متوسط عرضه</span>
                            <span class="stat-value">@item.AverageOfferVolume</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">نرخ موفقیت</span>
                            <div class="success-rate-indicator @GetSuccessRateClass(item.SuccessRate)">
                                <div class="bar"></div>
                                <div class="bar"></div>
                                <div class="bar"></div>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer">
                        @{
                            var competitionVisuals = GetCompetitionVisuals(item.AverageCompetition);
                        }
                        <div class="footer-stat-item" title="میانگین رقابت: @($"{item.AverageCompetition:F1}%")">
                            <i class="bi bi-people-fill"></i>
                            <span class="footer-stat-value @(competitionVisuals.CssClass)">@(competitionVisuals.Text)</span>
                        </div>

                        @{
                            var sellThroughPercent = GetSellThroughPercentage(item.SellThroughStatus);
                        }
                        <div class="footer-stat-item" title="وضعیت فروش">
                            <i class="bi bi-cart-check-fill"></i>
                            <span class="footer-stat-value @GetSellThroughColorClass(sellThroughPercent)">@item.SellThroughStatus</span>
                        </div>

                        <div class="footer-stat-item" title="مقایسه با رقبا">
                            <i class="bi bi-tag-fill"></i>
                            <span class="footer-stat-value @GetPriceStatusColorClass(item.CompetitorPriceStatus)">@item.CompetitorPriceComparison</span>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}
else
{
    <div class="widget-container">
        <div class="section-header">
            <h3 class="section-title">تحلیل عملکرد کالاها</h3>
        </div>
        <div class="empty-state">
            <p>اطلاعاتی برای تحلیل وجود ندارد.</p>
        </div>
    </div>
}


@code {
    [Parameter] public int SupplierId { get; set; }
    private SupplierCommodityAnalysisData? data;
    protected override async Task OnInitializedAsync()
    {
        data = await SupplierService.GetSupplierCommodityAnalysisAsync(SupplierId);
    }
    private string GetSuccessRateClass(double successRate)
    {
        if (successRate > 75) return "rate-high";
        if (successRate > 25) return "rate-medium";
        return "rate-low";
    }
    private string GetPriceStatusColorClass(PriceComparisonStatus status) => status switch
    {
        PriceComparisonStatus.Higher => "status-higher",
        PriceComparisonStatus.Lower => "status-lower",
        _ => "status-neutral"
    };
    private double GetSellThroughPercentage(string status) => status switch
    {
        "تقریبا همیشه تمام می‌شود" => 100,
        "معمولا تمام می‌شود" => 85,
        "اغلب باقی‌مانده دارد" => 50,
        "بخش کمی فروش می‌رود" => 20,
        _ => 0
    };
    private string GetSellThroughColorClass(double percentage)
    {
        if (percentage > 80) return "sell-through-high";
        if (percentage > 40) return "sell-through-medium";
        if (percentage > 0) return "sell-through-low";
        return "status-neutral";
    }
    private (string Text, string CssClass) GetCompetitionVisuals(double competition)
    {
        if (competition > 10) return ("رقابت بالا", "competition-high");
        if (competition > 3) return ("رقابت متوسط", "competition-medium");
        if (competition > 0) return ("رقابت کم", "competition-low");
        if (competition == 0) return ("بدون رقابت", "competition-low");
        return ("زیر قیمت پایه", "status-neutral"); // For negative values
    }
    private void GoToCommodity(SupplierCommodityAnalysisItem item)
    {
        if (item.CommodityId != 0)
        {
            NavManager.NavigateTo($"/commodity-tree/commodities/{item.CommodityId}");
        }
    }
}
