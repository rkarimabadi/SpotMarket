@inject NavigationManager NavManager
<div class="app-list-item" @onclick="() => GoToOffer(Offer)">
    <div class="item-icon-container">
        <i class="bi bi-building"></i>
    </div>
    <div class="item-info">
        <span class="title">@Offer.SupplierName</span>
        <span class="subtitle">@VolumeText</span>
    </div>
    <div class="item-action price-section">
        <div class="price-line">
            <span class="price-value">@DisplayPrice.ToString("N0")</span>
            <span class="price-unit">@Offer.PriceUnit</span>
        </div>
        <span class="status-badge status-@Offer.Status.ToString().ToLower()">
            @GetStatusText(Offer.Status)
        </span>
    </div>
</div>

@code {
    [Parameter]
    public OfferListItem Offer { get; set; } = new();

    /// <summary>
    /// Determines which price to display: Final Price for traded offers, Base Price for others.
    /// </summary>
    private decimal DisplayPrice => Offer.TradeDetails?.FinalPrice ?? Offer.BasePrice;

    /// <summary>
    /// Generates the volume text. It shows the actual traded volume for traded offers,
    /// and the initial offer volume for other statuses.
    /// </summary>
    private string VolumeText
    {
        get
        {
            decimal volumeToShow = Offer.TradeDetails?.TradeVolume ?? Offer.OfferVolume;
            return $"{volumeToShow:N0} {Offer.Unit}";
        }
    }

    /// <summary>
    /// Provides the Persian text for the offer status.
    /// </summary>
    private string GetStatusText(OfferTradeStatus status) => status switch
    {
        OfferTradeStatus.Traded => "معامله شد",
        OfferTradeStatus.Failed => "ناموفق",
        OfferTradeStatus.Untraded => "در انتظار",
        _ => ""
    };

    private void GoToOffer(OfferListItem item)
    {
        if (item.Id > 0)
        {
            NavManager.NavigateTo($"/offers/{item.Id}");
        }
    }
}

