@using SpotMarket.Shared.Models.Presentation
@using System.Text.RegularExpressions
@inject IOfferDetailsService OfferService
@if (Data != null)
{
    <div class="market-step-widget-horizontal pb-2">

        <div class="widget-top-content">
            <div class="market-info-h">
                <i class="bi bi-bar-chart-line-fill @GetProgressColorClass()"></i>
                <span class="market-name-h">@Offer?.CommodityName</span>
            </div>
            <div class="timer-h">
                @FormattedTime
            </div>
        </div>

        <div class="progress-container-h">
            <span class="time-marker start">@Data.StartTime</span>
            <div class="progress-track-h">
                <div class="progress-fill-h @GetProgressColorClass()" style="width: @ProgressPercentage%"></div>
            </div>
            <span class="time-marker end">@Data.FinishTime</span>
        </div>

        <div class="widget-bottom-content">
            <span class="stage-name-h">@_parsedDescription.StageName</span>
            <span class="product-name-h">@Offer?.Supplier</span>
            <span class="offer-code-h">@Offer?.Symbol</span>
        </div>
    </div>
}

@code {
    [Parameter]
    public TradeBoardMarketStepView? Data { get; set; }

    private OfferViewModel? Offer;
    private ParsedStepDescription _parsedDescription = ParsedStepDescription.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (Data != null)
        {
            if(Offer is null)
                Offer = await OfferService.GetOfferByIdAsync(Data.ActiveInstrumentId!.Value);
            _parsedDescription = ParseDescription(Data.StepDescription);
        }
    }

    private double ProgressPercentage =>
        (Data != null && Data.Duration > 0)
            ? ((Data.Duration - Data.Counter) / Data.Duration) * 100
            : 0;

    private string FormattedTime =>
        Data != null
            ? TimeSpan.FromSeconds(Data.Counter).ToString(@"mm\:ss")
            : "00:00";

    private string GetProgressColorClass() =>
        Data?.Color.ToLower() switch
        {
            "blue" => "bg-blue",
            "green" => "bg-green",
            "red" => "bg-red",
            "orange" => "bg-orange",
            _ => "bg-default"
        };

    private static ParsedStepDescription ParseDescription(string description)
    {
        if (string.IsNullOrWhiteSpace(description))
            return ParsedStepDescription.Empty;

        var match = Regex.Match(description, @"^(.*?)\[(.*?)\]\[(.*?)\]$");

        if (match.Success)
        {
            return new ParsedStepDescription(
                StageName: match.Groups[1].Value.Trim(),
                OfferCode: match.Groups[2].Value.Trim(),
                ProductName: match.Groups[3].Value.Trim()
            );
        }

        return new ParsedStepDescription(description, string.Empty, string.Empty);
    }

    private record ParsedStepDescription(string StageName, string OfferCode, string ProductName)
    {
        public static ParsedStepDescription Empty => new(string.Empty, string.Empty, string.Empty);
    }
}

