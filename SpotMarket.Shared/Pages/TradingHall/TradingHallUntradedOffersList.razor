@inject ITradingMarketInfoService TradingMarketInfoService

@if (_offers == null)
{
    <div class="loading-indicator">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>در حال بارگذاری عرضه‌های در انتظار...</p>
    </div>
}
else if (!FilteredOffers.Any())
{
    <div class="empty-state">
        <i class="bi bi-@(!string.IsNullOrEmpty(SearchTerm) ? "search" : "hourglass-split")"></i>
        @if (!string.IsNullOrEmpty(SearchTerm))
        {
            <span>موردی با عبارت جستجوی شما یافت نشد.</span>
        }
        else
        {
            <span>هیچ عرضه‌ای در انتظار معامله برای امروز وجود ندارد.</span>
        }
    </div>
}
else
{
    <OfferCategoryList Offers="FilteredOffers" />
}

@code {
    [Parameter]
    public int MarketId { get; set; }
    [Parameter]
    public string SearchTerm { get; set; } = string.Empty;

    private List<OfferListItem>? _offers;

    private List<OfferListItem> FilteredOffers
    {
        get
        {
            if (_offers == null) return new List<OfferListItem>();
            if (string.IsNullOrWhiteSpace(SearchTerm)) return _offers;

            return _offers.Where(o =>
                (o.CommodityName?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (o.SupplierName?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
            ).ToList();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (MarketId > 0)
        {
            _offers = await TradingMarketInfoService.GetUntradedOffersAsync(MarketId);
        }
    }
}
