@using System.Globalization
@using System.Text
@inject ICommodityService CommodityService
<div class="widget-container">
    @if (data != null && data.PriceHistory.Any())
    {
    <div class="trend-chart-card">
        <div class="widget-header">
            <div class="price-info">
                <div class="current-price">@data.CurrentPrice.ToString("N0", new CultureInfo("fa-IR"))</div>
            </div>

            <div class="date-info @(data.IsOutdated ? "outdated" : "")">
                @if (data.IsOutdated)
                {
                    <i class="bi bi-clock-history"></i>
                }
                <span>@data.DateLabel</span>
            </div>
        </div>
@*         <div class="price-info d-flex mb-2">
            <div class="price-change @(Data.ChangeAmount >= 0 ? "positive" : "negative")">
                @($"{(Data.ChangeAmount >= 0 ? "+" : "")}{Data.ChangeAmount:N0} ({Data.ChangePercentage:F2}%)")
            </div>
            <div class="ms-1 price-change-context">@Data.ChangeContext</div>
        </div> *@
        <div class="price-change-container @(data.ChangeAmount >= 0 ? "positive" : "negative") mb-2">
            <div class="change-indicator">
                <i class="bi @(data.ChangeAmount >= 0 ? "bi-arrow-up-short" : "bi-arrow-down-short")"></i>
                <span class="prcent">@($"{data.ChangePercentage:F2}%")</span>
                <span class="change-value">@($"{Math.Abs(data.ChangeAmount):N0}")</span>
            </div>
            <div class="change-context">@data.ChangeContext</div>
        </div>

        <div class="bar-chart-container">
            @if (data.PriceHistory.Any())
            {
                <svg width="100%" height="100%" viewBox="0 0 350 110">
                    @{
                        var maxPrice = data.PriceHistory.Max(d => d.Price);
                        var minPrice = data.PriceHistory.Min(d => d.Price);
                        var priceRange = maxPrice - minPrice;
                        if (priceRange == 0) priceRange = 1;

                        var barWidthPercentage = (100.0 / data.PriceHistory.Count) * 0.5;

                        for (int i = 0; i < data.PriceHistory.Count; i++)
                        {
                            var item = data.PriceHistory[i];
                            var barHeight = ((double)(item.Price - minPrice) / (double)priceRange) * 80 + 20; // % height (20% min)
                            var x = (100.0 / data.PriceHistory.Count) * (i + 0.5);
                            var y = 90 - barHeight;

                            <rect x="@((x - barWidthPercentage / 2).ToString(CultureInfo.InvariantCulture))%" y="90" width="@(barWidthPercentage.ToString(CultureInfo.InvariantCulture))%" height="0" class="@(i == data.PriceHistory.Count - 1 ? "latest" : "historical")" rx="4" ry="4">
                                <animate attributeName="height" from="0" to="@(barHeight.ToString(CultureInfo.InvariantCulture))" dur="0.5s" begin="@($"{i * 0.1}s")" fill="freeze" />
                                <animate attributeName="y" from="90" to="@(y.ToString(CultureInfo.InvariantCulture))" dur="0.5s" begin="@($"{i * 0.1}s")" fill="freeze" />
                            </rect>

                            @GenerateSvgTextLabel(item, x)
                        }
                    }
                </svg>
            }
        </div>
    </div>

    <div class="highlights-container">
        @foreach (var highlight in data.Highlights)
        {
            <div class="highlight-card">
                <div class="item-header">
                    <div class="icon-wrapper @highlight.IconColorClass">
                        <i class="@highlight.IconSvg"></i>
                    </div>
                    <span>@highlight.Title</span>
                </div>
                <div class="item-value">
                    @highlight.Value <span class="item-unit">@highlight.Unit</span>
                </div>
            </div>
        }
    </div>
}
    else
    {
        <!-- حالت نمایش نبودن داده -->
        <div class="trend-chart-card">
            <div class="bar-chart-container no-data-container">
                <div class="no-data-content">
                    <i class="bi bi-bar-chart-line"></i>
                    <span>داده‌ای برای نمایش وجود ندارد</span>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int CommodityId { get; set; }
    private PriceViewModel? data;
    protected override async Task OnInitializedAsync()
    {
        data = await CommodityService.GetPriceTrendsAsync(CommodityId);
    }
    private MarkupString GenerateSvgTextLabel(PriceHistoryPoint item, double x)
    {
        var xFormatted = x.ToString(CultureInfo.InvariantCulture);
        var textElement = $"<text x=\"{xFormatted}%\" y=\"105\" text-anchor=\"middle\" font-size=\"10px\" fill=\"var(--text-secondary-color)\">{item.DateLabel}</text>";
        return new MarkupString(textElement);
    }
}
