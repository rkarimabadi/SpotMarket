@page "/markets"




@inject NavStateService NavState
@inject SettingsService SettingsService
@inject IMarketsService MarketService
<PageTitle>بازارها</PageTitle>

<div class="page-container">
    <div class="page-header">
        <h1 class="page-title-large">بازارها</h1>
    </div>
    @if (marketSettings != null && marketSettings.VisibleInfoWidgets.Exists( x => x == MarketInfoWidgetType.ProgressRings))
    {
        <MarketProgressRingsWidget />
    }
    @if (settingsLoaded)
    {
        <!-- نمایش نمای اصلی بر اساس تنظیمات -->
        @switch (marketSettings?.MainView)
        {
            case MarketMainViewType.List:
                <MarketListWidget/>
                break;
            case MarketMainViewType.Heatmap:
                <MarketHeatmapWidget Subtitle="براساس میانگین وزنی قیمت" />
                break;
            case MarketMainViewType.Shortcuts:
                <AdvancedMarketShortcutsWidget Subtitle="" Title="" />
                break;
        }

        <!-- نمایش ویجت‌های اطلاعاتی بر اساس تنظیمات -->
        @if (marketSettings != null)
        {
            foreach (var widgetType in marketSettings.VisibleInfoWidgets)
            {
                @switch (widgetType)
                {
                    case MarketInfoWidgetType.SelectedCommodity:
                        <MarketContactsWidget Title="کالاهای پرطرفدار" Subtitle="براساس تعدد عرضه" />
                        break;
                    case MarketInfoWidgetType.TodayGroups:
                        <CommodityStatusHorizontalWidget Title="گروه‌های منتخب" Subtitle="براساس تعداد اطلاعیه عرضه" />
                        break;
                }
            }
        }
    }
    else
    {
        <p><em>در حال بارگذاری چیدمان...</em></p>
    }
</div>

@code {
    private MarketSettings? marketSettings;
    private bool settingsLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        NavState.SetNavState("بازارها", true);
        var settings = await SettingsService.LoadSettingsAsync() ?? SettingsService.GetDefaultSettings();
        marketSettings = settings.MarketPageLayout;
        settingsLoaded = true;
    }
  
}
